name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set version
        id: version
        run: |
          VERSION="${{ inputs.version }}"
          # Remove v prefix if present
          VERSION="${VERSION#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
      
      - name: Generate changelog
        id: changelog
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # Try to generate AI release notes
          if [ -n "$OPENAI_API_KEY" ]; then
            echo "Generating AI release notes..."
            if node tools/generate-release-notes.mjs --since-tag --out changelog.md; then
              echo "AI release notes generated successfully"
              # Add link to full changelog at the end
              echo "" >> changelog.md
              echo "---" >> changelog.md
              echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...v${{ steps.version.outputs.version }}" >> changelog.md
            else
              echo "AI generation failed, falling back to git log"
              # Fallback to simple changelog
              echo "## What's Changed" > changelog.md
              echo "" >> changelog.md
              
              if [ -n "$PREV_TAG" ]; then
                git log $PREV_TAG..HEAD --pretty=format:"- %s (%an)" --no-merges >> changelog.md
              else
                git log --pretty=format:"- %s (%an)" --no-merges -20 >> changelog.md
              fi
              
              echo "" >> changelog.md
              echo "" >> changelog.md
              echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...v${{ steps.version.outputs.version }}" >> changelog.md
            fi
          else
            echo "OPENAI_API_KEY not set, using git log"
            # Fallback to simple changelog
            echo "## What's Changed" > changelog.md
            echo "" >> changelog.md
            
            if [ -n "$PREV_TAG" ]; then
              git log $PREV_TAG..HEAD --pretty=format:"- %s (%an)" --no-merges >> changelog.md
            else
              git log --pretty=format:"- %s (%an)" --no-merges -20 >> changelog.md
            fi
            
            echo "" >> changelog.md
            echo "" >> changelog.md
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...v${{ steps.version.outputs.version }}" >> changelog.md
          fi
      
      - name: Create tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          body_path: changelog.md
          draft: false
          prerelease: ${{ inputs.prerelease }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            
          - os: macos-latest
            target: x86_64-apple-darwin
            
          - os: macos-latest
            target: aarch64-apple-darwin
            
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: v${{ needs.create-release.outputs.version }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf
            
      - name: Install dependencies
        run: pnpm install
        
      - name: Build helper
        run: |
          cd src-helper
          cargo build --release
          
      - name: Update version
        run: |
          # Update package.json
          npm version ${{ needs.create-release.outputs.version }} --no-git-tag-version || true
          # Update Cargo.toml
          sed -i.bak "s/^version = .*/version = \"${{ needs.create-release.outputs.version }}\"/" src-tauri/Cargo.toml || true
          sed -i "s/^version = .*/version = \"${{ needs.create-release.outputs.version }}\"/" src-tauri/Cargo.toml || true
          # Update tauri.conf.json
          sed -i.bak "s/\"version\": \".*\"/\"version\": \"${{ needs.create-release.outputs.version }}\"/" src-tauri/tauri.conf.json || true
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ needs.create-release.outputs.version }}\"/" src-tauri/tauri.conf.json || true
          
      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: v${{ needs.create-release.outputs.version }}
          releaseName: 'JaTerm v${{ needs.create-release.outputs.version }}'
          releaseBody: 'See the release notes for details.'
          releaseDraft: false
          prerelease: ${{ inputs.prerelease }}
          args: --target ${{ matrix.target }}